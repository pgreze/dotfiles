#!/usr/bin/env bash
# https://kvz.io/blog/bash-best-practices.html
# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Catch the error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail
# Turn on traces, useful while debugging.
# set -o xtrace

if [ "${1:-}" == "-h" ] || [ "${1:-}" == "--help" ]; then
    echo "Usage: $(basename $0) [version]"
    printf "\nRun the wrapper command in a standalone project and copy its outputs in the current directory\n"
    printf "\nIf no version is given, resolve the latest version from https://gradle.org/install/\n"
    exit 0
fi

resolve_latest_version() {
    local match=$(curl -fLsS https://gradle.org/install/ | grep -ioP "gradle [\d\.]+" | head -n 1)
    local version=${match:7}  # Drop "gradle " prefix
    echo $version
}

VERSION="${1:-}"
if [ -z "$VERSION" ]; then
    echo "Resolve the latest version..."
    VERSION="$(resolve_latest_version)"
    printf "\033[1A\033[K"    # Delete last line
fi

TARGET_WRAPPER="gradle/wrapper"
if [ ! -d "$TARGET_WRAPPER" ]; then
    echo "Missing directory: $TARGET_WRAPPER"
    exit 1
fi

TMP_DIR="$(mktemp -d)"
trap "rm -rf $TMP_DIR" EXIT
touch "$TMP_DIR/settings.gradle"

unset JAVA_OPTS
unset GRADLE_OPTS
GRADLE_ARGS="-q wrapper --gradle-version $VERSION --distribution-type ${DIST_TYPE:-bin}"
if (type gradle >/tmp/null 2>/tmp/null); then
    gradle=gradle
    echo "gradle $GRADLE_ARGS"
else
    gradle_dists="$HOME/.gradle/wrapper/dists"
    # TODO: handle if error
    gradle_folder="$(ls "$gradle_dists" | tail -n 1)"
    gradle="$(ls "$gradle_dists/$gradle_folder/"*/*"/bin/gradle")"
    echo "~/.gradle/wrapper/dists/$gradle_folder/../gradle $GRADLE_ARGS"
fi
"$gradle" -p "$TMP_DIR" --no-daemon -Porg.gradle.daemon=false $GRADLE_ARGS
echo

for file in "$TMP_DIR/"gradle{/wrapper/*,w*}; do
    subfile=${file:${#TMP_DIR}+1}
    echo "Overwrite $subfile"
    cp "$file" "$subfile"
done
