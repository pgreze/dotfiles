#!/usr/bin/env bash

if [[ "${BASH_SOURCE[0]}" = "${0}" ]]; then
    echo "Aimed to be called from a shell function to ensure \`cd\` behavior, not directly." 1>&2
    exit 1
fi

__gclone_usage() {
    printf "This command is cloning a git repo AND cd to the newly created directory.\n\n"
    echo "Usage: ${1##*/} repo [extra-args...]"
    echo "Usage: ${1##*/} user repo [extra-args...]"
    echo "Usage: ${1##*/} git@github.com:user/repo.git [extra-args...]"
    printf "\nIf no user is provided, current directory name is used.\n"
    printf "\nPossible extra-args: --single-branch --depth 1\n"
}

if [ -z "$1" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    __gclone_usage "$0" && return 0
elif [ -z "$1" ]; then
    __gclone_usage "$0" && return 1
elif [[ "$1" == *github.com* ]]; then
    local repo="$1"
elif [ -z "$2" ] || [[ "$2" == -* ]]; then
    local user="$(pwd | xargs basename)"
    local repo="git@github.com:$user/$1.git"
    confirm "git clone $repo ?" || (__gclone_usage "$0" && return 0)
else
    local repo="git@github.com:$1/$2.git"
    shift
fi
shift
local args=("$@")

# Clone repository
LOGS=$(git clone "${args[@]}" --progress "${repo}" 2>&1)
echo $LOGS

# Resolve created folder and move in
FOLDER=$(echo "$LOGS" | head -1 | cut -d\' -f2)
if [ -z "$FOLDER" ]; then
    echo 2>&1 "Could not resolve output directory"
    return 1
fi
printf "\ncd $(pwd)/$FOLDER\n"
cd "$FOLDER"
